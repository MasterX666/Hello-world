#include<bits/stdc++.h>
using namespace std;
#define MAX 1024
#define NIL NULL


char PreOrder[MAX];//"ABDECGHI" 示例1的前序：“ABCDEFSGHIJKLMNO”
char inOrder[MAX];//"DBEACHGI" 示例1的中序：“BCDASFHIJGEMNOLK”
char postOrder[MAX];//"DEBHIGCA"

typedef struct binaryTreeNode//二叉树结构
{
char data;//节点值
struct binaryTreeNode *lchild;//左子节点
struct binaryTreeNode *rchild;//右子节点
//根据需要加入其它字段
//int ltag,rtag;
//int level;//层次
}BiTreeNode; //树的结构

typedef struct LRtagBiTree//左右标志表示树节点
{
int ltag;
char data;
int rtag;
}LRBTree;


BiTreeNode * initial()//树节点初始化
{
BiTreeNode* node;
node=(BiTreeNode *)malloc(sizeof(BiTreeNode));
node->lchild=NIL;
node->rchild=NIL;
//node->level=0;
//node->parent='\0';
//node->data='\0';
return node;
}

BiTreeNode* BiTreeFromOrderingsPre(char* inorder, char* preorder, int
length)//根据前序中序生成子树
{
    if(length==0)
	return NULL;
	BiTreeNode* node=new BiTreeNode;
	node->data=*preorder;
	int i=0;
	for(;i<length;i++)
	{
		if(inorder[i]==*preorder)
		break;
	}
	node->lchild=BiTreeFromOrderingsPre(inorder,preorder+1,i);
	node->rchild=BiTreeFromOrderingsPre(inorder+i+1,preorder+i+1,length-i-1);
	return node;
}

BiTreeNode* BiTreeFromOrderingsPost(char* inorder, char* postorder, int
length)//根据前序后序生成子树
{
    }

BiTreeNode* BiTreeFromLRtag()
{

}

void r_preorder(BiTreeNode* t) //递归前序遍历，t:根
{
    int i;
    if(t!=NULL)
    {
        printf("%c",t->data);
        r_preorder(t->lchild);
        r_preorder(t->rchild);
    }
}

void r_inorder(BiTreeNode* t) //递归中序遍历，t:根
{
    int i;
    if(t!=NULL)
    {

        r_inorder(t->lchild);
        printf("%c",t->data);
        r_inorder(t->rchild);
    }
}

void r_postorder(BiTreeNode* t) //递归后序遍历，t:根
{
    int i;
    if(t!=NULL)
    {

        r_postorder(t->lchild);
        r_postorder(t->rchild);
        printf("%c",t->data);
    }
}

void hierachicalorder(BiTreeNode* t)//层次遍历，t:根
{
   BiTreeNode* q[100],*p ;
     int head,tail,i;
     if (t==NULL) return;
     q[0]=t; head=0; tail=1; //队列
      while (head<tail)
      { p=q[head++]; //出队
         printf("%c",p->data);
         if(p ->lchild!= NULL)
           q[tail++] = p ->lchild;
         if(p ->rchild!= NULL)
           q[tail++] = p ->rchild;
        }
}

void preorderNoRecursion(BiTreeNode* t)//非递归前序遍历，t:根
{
      stack<BiTreeNode*> s;
    BiTreeNode* p=t;
    while(p!=NULL||!s.empty())
    {
        while(p!=NULL)
        {
            cout<<p->data;
            s.push(p);
            p=p->lchild;
        }
        if(!s.empty())
        {
            p=s.top();
            s.pop();
            p=p->rchild;
        }
    }
}

void inorderNoRecursion(BiTreeNode *t)//非递归中序遍历，t:根
{
    stack<BiTreeNode *> s;
    BiTreeNode *p=t;
    while(p!=NULL||!s.empty())
    {
        while(p!=NULL)
        {
            s.push(p);
            p=p->lchild;
        }
        if(!s.empty())
        {
            p=s.top();
            cout<<p->data;
            s.pop();
            p=p->rchild;
        }
    }
}
void postorderNoRecursion(BiTreeNode* t)//非递归后序遍历，t:根
{
    BiTreeNode* p = t, *r = NULL;
    stack<BiTreeNode* > s;
    while (p || !s.empty()) {
        if (p) {//走到最左边
            s.push(p);
            p = p->lchild;
        }
        else {
            p = s.top();
            if (p->rchild && p->rchild != r)//右子树存在，未被访问
                p = p->rchild;
            else {
                s.pop();
                cout<<p->data;
                r = p;//记录最近访问过的节点
                p = NULL;//节点访问完后，重置p指针
            }
        }//else
    }//while

}

int length(BiTreeNode* node)
{
	if(node==NULL)
	return 0;
	int l=length(node->lchild);
	int r=length(node->rchild);
	return l>r?l+1:r+1;
}

bool IsCompleteTree(BiTreeNode* root)
{
	if(root==NULL)
        return true;
    bool leaf=false;//leaf变量用来标记一个状态是否发生（只要当前节点的左孩子和右孩子都为空或者左孩子不为空，右孩子为空时，这个状态就发生，只要发生了这个状态，以后访问到的节点必须都是叶节点）
    queue <BiTreeNode*>q;//通过队列q实现二叉树的层次遍历，通过层次遍历来判断是否为完全二叉树
    q.push(root);//加入头节点
    while (!q.empty())
    {
        BiTreeNode* p=q.front();
        q.pop();
        if((leaf&&(p->lchild!=NULL||p->rchild!=NULL))||(p->lchild==NULL&&p->rchild!=NULL))//这些判断条件是所有的不满足是完全二叉树的条件。条件一（第二个||前面的条件）：上述的状态已经发生，但是当前访问到的节点不是叶节点（有左孩子或者右孩子）。条件二：当前节点有右孩子，没有左孩子
            return false ;
        if(p->lchild!=NULL)//左孩子不为空，加入到队列中去
            q.push(p->lchild);
        if(p->rchild!=NULL)//右孩子不为空，加入到队列中去
            q.push(p->rchild);
        if((p->lchild!=NULL&&p->rchild==NULL)||(p->lchild==NULL&&p->rchild==NULL))//这个if语句就是判断状态是否要发生
            leaf=true;
    }
    return true;


}

//递归
bool IsFullBinaryTree(BiTreeNode* root)
{
	return (root == NULL) ||
		(root != NULL && IsFullBinaryTree(root->lchild) &&
		 IsFullBinaryTree(root->rchild)) &&
		 length(root->lchild) == length(root->rchild);
}

bool GoThroughTree(BiTreeNode* root)
{
    bool s=true;
    if(root!=NULL)
    {
        if(root->lchild!=NULL)
        {
            if(root->lchild->data>=root->data)
               s=false;
        }
        if(root->rchild!=NULL)
        {
            if(root->data>=root->rchild->data)
                s=false;
        }
        if(s==false) return s;
        else s=GoThroughTree(root->lchild)&&GoThroughTree(root->rchild);
    }
    return s;
}

int main()
{
    BiTreeNode* root;
    scanf("%s",PreOrder);
    scanf("%s",inOrder);
    int l=strlen(PreOrder);
    root=BiTreeFromOrderingsPre(inOrder,PreOrder,l);
    cout<<"用非递归实现前序遍历的结果为:";
    preorderNoRecursion(root);
    cout<<endl;
    cout<<"用非递归实现中序遍历的结果为:";
    inorderNoRecursion(root);
    cout<<endl;
    cout<<"用非递归实现后序遍历的结果为:";
    postorderNoRecursion(root);
    cout<<endl;
    cout<<"树的层次遍历结果为:";
    hierachicalorder(root);
    cout<<endl;
    cout<<"结点的数目为"<<l<<endl;
    cout<<"树的高度为"<<length(root)-1<<endl;
    bool k;
    k=IsCompleteTree(root);
    if(k) cout<<"这是一个完全二叉树"<<endl;
    else cout<<"这不是一个完全二叉树"<<endl;
    k=IsFullBinaryTree(root);
    if(k) cout<<"这是一个满二叉树"<<endl;
    else cout<<"这不是一个满二叉树"<<endl;
    k=GoThroughTree(root);
    if(k) cout<<"这个树满足左子树上的结点的值都小于根，右子树上的结点的值都大于根 "<<endl;
    else cout<<"这个树不满足左子树上的结点的值都小于根，右子树上的结点的值都大于根 "<<endl;
    cout<<"将二叉树转换成森林的结果为:"<<endl;
}
